// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    ///
    ///
    /// # Implements
    ///
    /// [`HeWindowExt`][trait@crate::prelude::HeWindowExt], [`trait@gtk::prelude::WindowExt`], [`trait@gtk::prelude::WidgetExt`], [`trait@glib::ObjectExt`], [`trait@gtk::prelude::AccessibleExt`], [`trait@gtk::prelude::BuildableExt`], [`trait@gtk::prelude::ConstraintTargetExt`], [`trait@gtk::prelude::NativeExt`], [`trait@gtk::prelude::RootExt`], [`trait@gtk::prelude::ShortcutManagerExt`]
    // rustdoc-stripper-ignore-next-stop
    ///
    ///
    /// # Implements
    ///
    /// [`HeWindowExt`][trait@crate::prelude::HeWindowExt], [`trait@gtk::prelude::WindowExt`], [`trait@gtk::prelude::WidgetExt`], [`trait@glib::ObjectExt`], [`trait@gtk::prelude::AccessibleExt`], [`trait@gtk::prelude::BuildableExt`], [`trait@gtk::prelude::ConstraintTargetExt`], [`trait@gtk::prelude::NativeExt`], [`trait@gtk::prelude::RootExt`], [`trait@gtk::prelude::ShortcutManagerExt`]
    // rustdoc-stripper-ignore-next-stop
    ///
    ///
    /// # Implements
    ///
    /// [`HeWindowExt`][trait@crate::prelude::HeWindowExt], [`trait@gtk::prelude::WindowExt`], [`trait@gtk::prelude::WidgetExt`], [`trait@glib::ObjectExt`], [`trait@gtk::prelude::AccessibleExt`], [`trait@gtk::prelude::BuildableExt`], [`trait@gtk::prelude::ConstraintTargetExt`], [`trait@gtk::prelude::NativeExt`], [`trait@gtk::prelude::RootExt`], [`trait@gtk::prelude::ShortcutManagerExt`]
    #[doc(alias = "HeWindow")]
    pub struct Window(Object<ffi::HeWindow, ffi::HeWindowClass>) @extends gtk::Window, gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget, gtk::Native, gtk::Root, gtk::ShortcutManager;

    match fn {
        type_ => || ffi::he_window_get_type(),
    }
}

impl Window {
    pub const NONE: Option<&'static Window> = None;

    #[doc(alias = "he_window_new")]
    pub fn new() -> Window {
        unsafe { from_glib_none(ffi::he_window_new()) }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Window`] objects.
    ///
    /// This method returns an instance of [`WindowBuilder`](crate::builders::WindowBuilder) which can be used to create [`Window`] objects.
    pub fn builder() -> WindowBuilder {
        WindowBuilder::default()
    }
}

impl Default for Window {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(Clone, Default)]
// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Window`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct WindowBuilder {
    parent: Option<gtk::Window>,
    modal: Option<bool>,
    has_title: Option<bool>,
    has_back_button: Option<bool>,
    application: Option<gtk::Application>,
    child: Option<gtk::Widget>,
    decorated: Option<bool>,
    default_height: Option<i32>,
    default_widget: Option<gtk::Widget>,
    default_width: Option<i32>,
    deletable: Option<bool>,
    destroy_with_parent: Option<bool>,
    display: Option<gdk::Display>,
    focus_visible: Option<bool>,
    focus_widget: Option<gtk::Widget>,
    fullscreened: Option<bool>,
    #[cfg(any(feature = "gtk_v4_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v4_2")))]
    handle_menubar_accel: Option<bool>,
    hide_on_close: Option<bool>,
    icon_name: Option<String>,
    maximized: Option<bool>,
    mnemonics_visible: Option<bool>,
    resizable: Option<bool>,
    startup_id: Option<String>,
    title: Option<String>,
    #[cfg(any(feature = "gtk_v4_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v4_6")))]
    titlebar: Option<gtk::Widget>,
    transient_for: Option<gtk::Window>,
    can_focus: Option<bool>,
    can_target: Option<bool>,
    css_classes: Option<Vec<String>>,
    css_name: Option<String>,
    cursor: Option<gdk::Cursor>,
    focus_on_click: Option<bool>,
    focusable: Option<bool>,
    halign: Option<gtk::Align>,
    has_tooltip: Option<bool>,
    height_request: Option<i32>,
    hexpand: Option<bool>,
    hexpand_set: Option<bool>,
    layout_manager: Option<gtk::LayoutManager>,
    margin_bottom: Option<i32>,
    margin_end: Option<i32>,
    margin_start: Option<i32>,
    margin_top: Option<i32>,
    name: Option<String>,
    opacity: Option<f64>,
    overflow: Option<gtk::Overflow>,
    receives_default: Option<bool>,
    sensitive: Option<bool>,
    tooltip_markup: Option<String>,
    tooltip_text: Option<String>,
    valign: Option<gtk::Align>,
    vexpand: Option<bool>,
    vexpand_set: Option<bool>,
    visible: Option<bool>,
    width_request: Option<i32>,
    accessible_role: Option<gtk::AccessibleRole>,
}

impl WindowBuilder {
    // rustdoc-stripper-ignore-next
    /// Create a new [`WindowBuilder`].
    pub fn new() -> Self {
        Self::default()
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Window`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Window {
        let mut properties: Vec<(&str, &dyn ToValue)> = vec![];
        if let Some(ref parent) = self.parent {
            properties.push(("parent", parent));
        }
        if let Some(ref modal) = self.modal {
            properties.push(("modal", modal));
        }
        if let Some(ref has_title) = self.has_title {
            properties.push(("has-title", has_title));
        }
        if let Some(ref has_back_button) = self.has_back_button {
            properties.push(("has-back-button", has_back_button));
        }
        if let Some(ref application) = self.application {
            properties.push(("application", application));
        }
        if let Some(ref child) = self.child {
            properties.push(("child", child));
        }
        if let Some(ref decorated) = self.decorated {
            properties.push(("decorated", decorated));
        }
        if let Some(ref default_height) = self.default_height {
            properties.push(("default-height", default_height));
        }
        if let Some(ref default_widget) = self.default_widget {
            properties.push(("default-widget", default_widget));
        }
        if let Some(ref default_width) = self.default_width {
            properties.push(("default-width", default_width));
        }
        if let Some(ref deletable) = self.deletable {
            properties.push(("deletable", deletable));
        }
        if let Some(ref destroy_with_parent) = self.destroy_with_parent {
            properties.push(("destroy-with-parent", destroy_with_parent));
        }
        if let Some(ref display) = self.display {
            properties.push(("display", display));
        }
        if let Some(ref focus_visible) = self.focus_visible {
            properties.push(("focus-visible", focus_visible));
        }
        if let Some(ref focus_widget) = self.focus_widget {
            properties.push(("focus-widget", focus_widget));
        }
        if let Some(ref fullscreened) = self.fullscreened {
            properties.push(("fullscreened", fullscreened));
        }
        #[cfg(any(feature = "gtk_v4_2", feature = "dox"))]
        if let Some(ref handle_menubar_accel) = self.handle_menubar_accel {
            properties.push(("handle-menubar-accel", handle_menubar_accel));
        }
        if let Some(ref hide_on_close) = self.hide_on_close {
            properties.push(("hide-on-close", hide_on_close));
        }
        if let Some(ref icon_name) = self.icon_name {
            properties.push(("icon-name", icon_name));
        }
        if let Some(ref maximized) = self.maximized {
            properties.push(("maximized", maximized));
        }
        if let Some(ref mnemonics_visible) = self.mnemonics_visible {
            properties.push(("mnemonics-visible", mnemonics_visible));
        }
        if let Some(ref resizable) = self.resizable {
            properties.push(("resizable", resizable));
        }
        if let Some(ref startup_id) = self.startup_id {
            properties.push(("startup-id", startup_id));
        }
        if let Some(ref title) = self.title {
            properties.push(("title", title));
        }
        #[cfg(any(feature = "gtk_v4_6", feature = "dox"))]
        if let Some(ref titlebar) = self.titlebar {
            properties.push(("titlebar", titlebar));
        }
        if let Some(ref transient_for) = self.transient_for {
            properties.push(("transient-for", transient_for));
        }
        if let Some(ref can_focus) = self.can_focus {
            properties.push(("can-focus", can_focus));
        }
        if let Some(ref can_target) = self.can_target {
            properties.push(("can-target", can_target));
        }
        if let Some(ref css_classes) = self.css_classes {
            properties.push(("css-classes", css_classes));
        }
        if let Some(ref css_name) = self.css_name {
            properties.push(("css-name", css_name));
        }
        if let Some(ref cursor) = self.cursor {
            properties.push(("cursor", cursor));
        }
        if let Some(ref focus_on_click) = self.focus_on_click {
            properties.push(("focus-on-click", focus_on_click));
        }
        if let Some(ref focusable) = self.focusable {
            properties.push(("focusable", focusable));
        }
        if let Some(ref halign) = self.halign {
            properties.push(("halign", halign));
        }
        if let Some(ref has_tooltip) = self.has_tooltip {
            properties.push(("has-tooltip", has_tooltip));
        }
        if let Some(ref height_request) = self.height_request {
            properties.push(("height-request", height_request));
        }
        if let Some(ref hexpand) = self.hexpand {
            properties.push(("hexpand", hexpand));
        }
        if let Some(ref hexpand_set) = self.hexpand_set {
            properties.push(("hexpand-set", hexpand_set));
        }
        if let Some(ref layout_manager) = self.layout_manager {
            properties.push(("layout-manager", layout_manager));
        }
        if let Some(ref margin_bottom) = self.margin_bottom {
            properties.push(("margin-bottom", margin_bottom));
        }
        if let Some(ref margin_end) = self.margin_end {
            properties.push(("margin-end", margin_end));
        }
        if let Some(ref margin_start) = self.margin_start {
            properties.push(("margin-start", margin_start));
        }
        if let Some(ref margin_top) = self.margin_top {
            properties.push(("margin-top", margin_top));
        }
        if let Some(ref name) = self.name {
            properties.push(("name", name));
        }
        if let Some(ref opacity) = self.opacity {
            properties.push(("opacity", opacity));
        }
        if let Some(ref overflow) = self.overflow {
            properties.push(("overflow", overflow));
        }
        if let Some(ref receives_default) = self.receives_default {
            properties.push(("receives-default", receives_default));
        }
        if let Some(ref sensitive) = self.sensitive {
            properties.push(("sensitive", sensitive));
        }
        if let Some(ref tooltip_markup) = self.tooltip_markup {
            properties.push(("tooltip-markup", tooltip_markup));
        }
        if let Some(ref tooltip_text) = self.tooltip_text {
            properties.push(("tooltip-text", tooltip_text));
        }
        if let Some(ref valign) = self.valign {
            properties.push(("valign", valign));
        }
        if let Some(ref vexpand) = self.vexpand {
            properties.push(("vexpand", vexpand));
        }
        if let Some(ref vexpand_set) = self.vexpand_set {
            properties.push(("vexpand-set", vexpand_set));
        }
        if let Some(ref visible) = self.visible {
            properties.push(("visible", visible));
        }
        if let Some(ref width_request) = self.width_request {
            properties.push(("width-request", width_request));
        }
        if let Some(ref accessible_role) = self.accessible_role {
            properties.push(("accessible-role", accessible_role));
        }
        glib::Object::new::<Window>(&properties).expect("Failed to create an instance of Window")
    }

    pub fn parent(mut self, parent: &impl IsA<gtk::Window>) -> Self {
        self.parent = Some(parent.clone().upcast());
        self
    }

    /// If [`true`], the window is modal.
    // rustdoc-stripper-ignore-next-stop
    /// If [`true`], the window is modal.
    // rustdoc-stripper-ignore-next-stop
    /// If [`true`], the window is modal.
    // rustdoc-stripper-ignore-next-stop
    /// If [`true`], the window is modal.
    pub fn modal(mut self, modal: bool) -> Self {
        self.modal = Some(modal);
        self
    }

    pub fn has_title(mut self, has_title: bool) -> Self {
        self.has_title = Some(has_title);
        self
    }

    pub fn has_back_button(mut self, has_back_button: bool) -> Self {
        self.has_back_button = Some(has_back_button);
        self
    }

    /// The [`gtk::Application`][crate::gtk::Application] associated with the window.
    ///
    /// The application will be kept alive for at least as long as it
    /// has any windows associated with it (see g_application_hold()
    /// for a way to keep it alive without windows).
    ///
    /// Normally, the connection between the application and the window
    /// will remain until the window is destroyed, but you can explicitly
    /// remove it by setting the :application property to [`None`].
    // rustdoc-stripper-ignore-next-stop
    /// The [`gtk::Application`][crate::gtk::Application] associated with the window.
    ///
    /// The application will be kept alive for at least as long as it
    /// has any windows associated with it (see g_application_hold()
    /// for a way to keep it alive without windows).
    ///
    /// Normally, the connection between the application and the window
    /// will remain until the window is destroyed, but you can explicitly
    /// remove it by setting the :application property to [`None`].
    // rustdoc-stripper-ignore-next-stop
    /// The [`gtk::Application`][crate::gtk::Application] associated with the window.
    ///
    /// The application will be kept alive for at least as long as it
    /// has any windows associated with it (see g_application_hold()
    /// for a way to keep it alive without windows).
    ///
    /// Normally, the connection between the application and the window
    /// will remain until the window is destroyed, but you can explicitly
    /// remove it by setting the :application property to [`None`].
    // rustdoc-stripper-ignore-next-stop
    /// The [`gtk::Application`][crate::gtk::Application] associated with the window.
    ///
    /// The application will be kept alive for at least as long as it
    /// has any windows associated with it (see g_application_hold()
    /// for a way to keep it alive without windows).
    ///
    /// Normally, the connection between the application and the window
    /// will remain until the window is destroyed, but you can explicitly
    /// remove it by setting the :application property to [`None`].
    pub fn application(mut self, application: &impl IsA<gtk::Application>) -> Self {
        self.application = Some(application.clone().upcast());
        self
    }

    /// The child widget.
    // rustdoc-stripper-ignore-next-stop
    /// The child widget.
    // rustdoc-stripper-ignore-next-stop
    /// The child widget.
    // rustdoc-stripper-ignore-next-stop
    /// The child widget.
    pub fn child(mut self, child: &impl IsA<gtk::Widget>) -> Self {
        self.child = Some(child.clone().upcast());
        self
    }

    /// Whether the window should have a frame (also known as *decorations*).
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window should have a frame (also known as *decorations*).
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window should have a frame (also known as *decorations*).
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window should have a frame (also known as *decorations*).
    pub fn decorated(mut self, decorated: bool) -> Self {
        self.decorated = Some(decorated);
        self
    }

    /// The default height of the window.
    // rustdoc-stripper-ignore-next-stop
    /// The default height of the window.
    // rustdoc-stripper-ignore-next-stop
    /// The default height of the window.
    // rustdoc-stripper-ignore-next-stop
    /// The default height of the window.
    pub fn default_height(mut self, default_height: i32) -> Self {
        self.default_height = Some(default_height);
        self
    }

    /// The default widget.
    // rustdoc-stripper-ignore-next-stop
    /// The default widget.
    // rustdoc-stripper-ignore-next-stop
    /// The default widget.
    // rustdoc-stripper-ignore-next-stop
    /// The default widget.
    pub fn default_widget(mut self, default_widget: &impl IsA<gtk::Widget>) -> Self {
        self.default_widget = Some(default_widget.clone().upcast());
        self
    }

    /// The default width of the window.
    // rustdoc-stripper-ignore-next-stop
    /// The default width of the window.
    // rustdoc-stripper-ignore-next-stop
    /// The default width of the window.
    // rustdoc-stripper-ignore-next-stop
    /// The default width of the window.
    pub fn default_width(mut self, default_width: i32) -> Self {
        self.default_width = Some(default_width);
        self
    }

    /// Whether the window frame should have a close button.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window frame should have a close button.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window frame should have a close button.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window frame should have a close button.
    pub fn deletable(mut self, deletable: bool) -> Self {
        self.deletable = Some(deletable);
        self
    }

    /// If this window should be destroyed when the parent is destroyed.
    // rustdoc-stripper-ignore-next-stop
    /// If this window should be destroyed when the parent is destroyed.
    // rustdoc-stripper-ignore-next-stop
    /// If this window should be destroyed when the parent is destroyed.
    // rustdoc-stripper-ignore-next-stop
    /// If this window should be destroyed when the parent is destroyed.
    pub fn destroy_with_parent(mut self, destroy_with_parent: bool) -> Self {
        self.destroy_with_parent = Some(destroy_with_parent);
        self
    }

    /// The display that will display this window.
    // rustdoc-stripper-ignore-next-stop
    /// The display that will display this window.
    // rustdoc-stripper-ignore-next-stop
    /// The display that will display this window.
    // rustdoc-stripper-ignore-next-stop
    /// The display that will display this window.
    pub fn display(mut self, display: &gdk::Display) -> Self {
        self.display = Some(display.clone());
        self
    }

    /// Whether 'focus rectangles' are currently visible in this window.
    ///
    /// This property is maintained by GTK based on user input
    /// and should not be set by applications.
    // rustdoc-stripper-ignore-next-stop
    /// Whether 'focus rectangles' are currently visible in this window.
    ///
    /// This property is maintained by GTK based on user input
    /// and should not be set by applications.
    // rustdoc-stripper-ignore-next-stop
    /// Whether 'focus rectangles' are currently visible in this window.
    ///
    /// This property is maintained by GTK based on user input
    /// and should not be set by applications.
    // rustdoc-stripper-ignore-next-stop
    /// Whether 'focus rectangles' are currently visible in this window.
    ///
    /// This property is maintained by GTK based on user input
    /// and should not be set by applications.
    pub fn focus_visible(mut self, focus_visible: bool) -> Self {
        self.focus_visible = Some(focus_visible);
        self
    }

    /// The focus widget.
    // rustdoc-stripper-ignore-next-stop
    /// The focus widget.
    // rustdoc-stripper-ignore-next-stop
    /// The focus widget.
    // rustdoc-stripper-ignore-next-stop
    /// The focus widget.
    pub fn focus_widget(mut self, focus_widget: &impl IsA<gtk::Widget>) -> Self {
        self.focus_widget = Some(focus_widget.clone().upcast());
        self
    }

    /// Whether the window is fullscreen.
    ///
    /// Setting this property is the equivalent of calling
    /// [`WindowExtManual::fullscreen()`][crate::gtk::prelude::WindowExtManual::fullscreen()] or [`WindowExtManual::unfullscreen()`][crate::gtk::prelude::WindowExtManual::unfullscreen()];
    /// either operation is asynchronous, which means you will need to
    /// connect to the ::notify signal in order to know whether the
    /// operation was successful.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window is fullscreen.
    ///
    /// Setting this property is the equivalent of calling
    /// [`WindowExtManual::fullscreen()`][crate::gtk::prelude::WindowExtManual::fullscreen()] or [`WindowExtManual::unfullscreen()`][crate::gtk::prelude::WindowExtManual::unfullscreen()];
    /// either operation is asynchronous, which means you will need to
    /// connect to the ::notify signal in order to know whether the
    /// operation was successful.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window is fullscreen.
    ///
    /// Setting this property is the equivalent of calling
    /// [`WindowExtManual::fullscreen()`][crate::gtk::prelude::WindowExtManual::fullscreen()] or [`WindowExtManual::unfullscreen()`][crate::gtk::prelude::WindowExtManual::unfullscreen()];
    /// either operation is asynchronous, which means you will need to
    /// connect to the ::notify signal in order to know whether the
    /// operation was successful.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window is fullscreen.
    ///
    /// Setting this property is the equivalent of calling
    /// [`WindowExtManual::fullscreen()`][crate::gtk::prelude::WindowExtManual::fullscreen()] or [`WindowExtManual::unfullscreen()`][crate::gtk::prelude::WindowExtManual::unfullscreen()];
    /// either operation is asynchronous, which means you will need to
    /// connect to the ::notify signal in order to know whether the
    /// operation was successful.
    pub fn fullscreened(mut self, fullscreened: bool) -> Self {
        self.fullscreened = Some(fullscreened);
        self
    }

    /// Whether the window frame should handle F10 for activating
    /// menubars.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window frame should handle F10 for activating
    /// menubars.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window frame should handle F10 for activating
    /// menubars.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window frame should handle F10 for activating
    /// menubars.
    #[cfg(any(feature = "gtk_v4_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v4_2")))]
    pub fn handle_menubar_accel(mut self, handle_menubar_accel: bool) -> Self {
        self.handle_menubar_accel = Some(handle_menubar_accel);
        self
    }

    /// If this window should be hidden when the users clicks the close button.
    // rustdoc-stripper-ignore-next-stop
    /// If this window should be hidden when the users clicks the close button.
    // rustdoc-stripper-ignore-next-stop
    /// If this window should be hidden when the users clicks the close button.
    // rustdoc-stripper-ignore-next-stop
    /// If this window should be hidden when the users clicks the close button.
    pub fn hide_on_close(mut self, hide_on_close: bool) -> Self {
        self.hide_on_close = Some(hide_on_close);
        self
    }

    /// Specifies the name of the themed icon to use as the window icon.
    ///
    /// See `Gtk::IconTheme` for more details.
    // rustdoc-stripper-ignore-next-stop
    /// Specifies the name of the themed icon to use as the window icon.
    ///
    /// See `Gtk::IconTheme` for more details.
    // rustdoc-stripper-ignore-next-stop
    /// Specifies the name of the themed icon to use as the window icon.
    ///
    /// See `Gtk::IconTheme` for more details.
    // rustdoc-stripper-ignore-next-stop
    /// Specifies the name of the themed icon to use as the window icon.
    ///
    /// See `Gtk::IconTheme` for more details.
    pub fn icon_name(mut self, icon_name: &str) -> Self {
        self.icon_name = Some(icon_name.to_string());
        self
    }

    /// Whether the window is maximized.
    ///
    /// Setting this property is the equivalent of calling
    /// [`WindowExtManual::maximize()`][crate::gtk::prelude::WindowExtManual::maximize()] or [`WindowExtManual::unmaximize()`][crate::gtk::prelude::WindowExtManual::unmaximize()];
    /// either operation is asynchronous, which means you will need to
    /// connect to the ::notify signal in order to know whether the
    /// operation was successful.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window is maximized.
    ///
    /// Setting this property is the equivalent of calling
    /// [`WindowExtManual::maximize()`][crate::gtk::prelude::WindowExtManual::maximize()] or [`WindowExtManual::unmaximize()`][crate::gtk::prelude::WindowExtManual::unmaximize()];
    /// either operation is asynchronous, which means you will need to
    /// connect to the ::notify signal in order to know whether the
    /// operation was successful.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window is maximized.
    ///
    /// Setting this property is the equivalent of calling
    /// [`WindowExtManual::maximize()`][crate::gtk::prelude::WindowExtManual::maximize()] or [`WindowExtManual::unmaximize()`][crate::gtk::prelude::WindowExtManual::unmaximize()];
    /// either operation is asynchronous, which means you will need to
    /// connect to the ::notify signal in order to know whether the
    /// operation was successful.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the window is maximized.
    ///
    /// Setting this property is the equivalent of calling
    /// [`WindowExtManual::maximize()`][crate::gtk::prelude::WindowExtManual::maximize()] or [`WindowExtManual::unmaximize()`][crate::gtk::prelude::WindowExtManual::unmaximize()];
    /// either operation is asynchronous, which means you will need to
    /// connect to the ::notify signal in order to know whether the
    /// operation was successful.
    pub fn maximized(mut self, maximized: bool) -> Self {
        self.maximized = Some(maximized);
        self
    }

    /// Whether mnemonics are currently visible in this window.
    ///
    /// This property is maintained by GTK based on user input,
    /// and should not be set by applications.
    // rustdoc-stripper-ignore-next-stop
    /// Whether mnemonics are currently visible in this window.
    ///
    /// This property is maintained by GTK based on user input,
    /// and should not be set by applications.
    // rustdoc-stripper-ignore-next-stop
    /// Whether mnemonics are currently visible in this window.
    ///
    /// This property is maintained by GTK based on user input,
    /// and should not be set by applications.
    // rustdoc-stripper-ignore-next-stop
    /// Whether mnemonics are currently visible in this window.
    ///
    /// This property is maintained by GTK based on user input,
    /// and should not be set by applications.
    pub fn mnemonics_visible(mut self, mnemonics_visible: bool) -> Self {
        self.mnemonics_visible = Some(mnemonics_visible);
        self
    }

    /// If [`true`], users can resize the window.
    // rustdoc-stripper-ignore-next-stop
    /// If [`true`], users can resize the window.
    // rustdoc-stripper-ignore-next-stop
    /// If [`true`], users can resize the window.
    // rustdoc-stripper-ignore-next-stop
    /// If [`true`], users can resize the window.
    pub fn resizable(mut self, resizable: bool) -> Self {
        self.resizable = Some(resizable);
        self
    }

    /// A write-only property for setting window's startup notification identifier.
    // rustdoc-stripper-ignore-next-stop
    /// A write-only property for setting window's startup notification identifier.
    // rustdoc-stripper-ignore-next-stop
    /// A write-only property for setting window's startup notification identifier.
    // rustdoc-stripper-ignore-next-stop
    /// A write-only property for setting window's startup notification identifier.
    pub fn startup_id(mut self, startup_id: &str) -> Self {
        self.startup_id = Some(startup_id.to_string());
        self
    }

    /// The title of the window.
    // rustdoc-stripper-ignore-next-stop
    /// The title of the window.
    // rustdoc-stripper-ignore-next-stop
    /// The title of the window.
    // rustdoc-stripper-ignore-next-stop
    /// The title of the window.
    pub fn title(mut self, title: &str) -> Self {
        self.title = Some(title.to_string());
        self
    }

    /// The titlebar widget.
    // rustdoc-stripper-ignore-next-stop
    /// The titlebar widget.
    // rustdoc-stripper-ignore-next-stop
    /// The titlebar widget.
    // rustdoc-stripper-ignore-next-stop
    /// The titlebar widget.
    #[cfg(any(feature = "gtk_v4_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "gtk_v4_6")))]
    pub fn titlebar(mut self, titlebar: &impl IsA<gtk::Widget>) -> Self {
        self.titlebar = Some(titlebar.clone().upcast());
        self
    }

    /// The transient parent of the window.
    // rustdoc-stripper-ignore-next-stop
    /// The transient parent of the window.
    // rustdoc-stripper-ignore-next-stop
    /// The transient parent of the window.
    // rustdoc-stripper-ignore-next-stop
    /// The transient parent of the window.
    pub fn transient_for(mut self, transient_for: &impl IsA<gtk::Window>) -> Self {
        self.transient_for = Some(transient_for.clone().upcast());
        self
    }

    /// Whether the widget or any of its descendents can accept
    /// the input focus.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget or any of its descendents can accept
    /// the input focus.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget or any of its descendents can accept
    /// the input focus.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget or any of its descendents can accept
    /// the input focus.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    pub fn can_focus(mut self, can_focus: bool) -> Self {
        self.can_focus = Some(can_focus);
        self
    }

    /// Whether the widget can receive pointer events.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget can receive pointer events.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget can receive pointer events.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget can receive pointer events.
    pub fn can_target(mut self, can_target: bool) -> Self {
        self.can_target = Some(can_target);
        self
    }

    /// A list of css classes applied to this widget.
    // rustdoc-stripper-ignore-next-stop
    /// A list of css classes applied to this widget.
    // rustdoc-stripper-ignore-next-stop
    /// A list of css classes applied to this widget.
    // rustdoc-stripper-ignore-next-stop
    /// A list of css classes applied to this widget.
    pub fn css_classes(mut self, css_classes: Vec<String>) -> Self {
        self.css_classes = Some(css_classes);
        self
    }

    /// The name of this widget in the CSS tree.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    // rustdoc-stripper-ignore-next-stop
    /// The name of this widget in the CSS tree.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    // rustdoc-stripper-ignore-next-stop
    /// The name of this widget in the CSS tree.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    // rustdoc-stripper-ignore-next-stop
    /// The name of this widget in the CSS tree.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    pub fn css_name(mut self, css_name: &str) -> Self {
        self.css_name = Some(css_name.to_string());
        self
    }

    /// The cursor used by @widget.
    // rustdoc-stripper-ignore-next-stop
    /// The cursor used by @widget.
    // rustdoc-stripper-ignore-next-stop
    /// The cursor used by @widget.
    // rustdoc-stripper-ignore-next-stop
    /// The cursor used by @widget.
    pub fn cursor(mut self, cursor: &gdk::Cursor) -> Self {
        self.cursor = Some(cursor.clone());
        self
    }

    /// Whether the widget should grab focus when it is clicked with the mouse.
    ///
    /// This property is only relevant for widgets that can take focus.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget should grab focus when it is clicked with the mouse.
    ///
    /// This property is only relevant for widgets that can take focus.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget should grab focus when it is clicked with the mouse.
    ///
    /// This property is only relevant for widgets that can take focus.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget should grab focus when it is clicked with the mouse.
    ///
    /// This property is only relevant for widgets that can take focus.
    pub fn focus_on_click(mut self, focus_on_click: bool) -> Self {
        self.focus_on_click = Some(focus_on_click);
        self
    }

    /// Whether this widget itself will accept the input focus.
    // rustdoc-stripper-ignore-next-stop
    /// Whether this widget itself will accept the input focus.
    // rustdoc-stripper-ignore-next-stop
    /// Whether this widget itself will accept the input focus.
    // rustdoc-stripper-ignore-next-stop
    /// Whether this widget itself will accept the input focus.
    pub fn focusable(mut self, focusable: bool) -> Self {
        self.focusable = Some(focusable);
        self
    }

    /// How to distribute horizontal space if widget gets extra space.
    // rustdoc-stripper-ignore-next-stop
    /// How to distribute horizontal space if widget gets extra space.
    // rustdoc-stripper-ignore-next-stop
    /// How to distribute horizontal space if widget gets extra space.
    // rustdoc-stripper-ignore-next-stop
    /// How to distribute horizontal space if widget gets extra space.
    pub fn halign(mut self, halign: gtk::Align) -> Self {
        self.halign = Some(halign);
        self
    }

    /// Enables or disables the emission of the ::query-tooltip signal on @widget.
    ///
    /// A value of [`true`] indicates that @widget can have a tooltip, in this case
    /// the widget will be queried using `signal::gtk::Widget::query-tooltip` to
    /// determine whether it will provide a tooltip or not.
    // rustdoc-stripper-ignore-next-stop
    /// Enables or disables the emission of the ::query-tooltip signal on @widget.
    ///
    /// A value of [`true`] indicates that @widget can have a tooltip, in this case
    /// the widget will be queried using `signal::gtk::Widget::query-tooltip` to
    /// determine whether it will provide a tooltip or not.
    // rustdoc-stripper-ignore-next-stop
    /// Enables or disables the emission of the ::query-tooltip signal on @widget.
    ///
    /// A value of [`true`] indicates that @widget can have a tooltip, in this case
    /// the widget will be queried using `signal::gtk::Widget::query-tooltip` to
    /// determine whether it will provide a tooltip or not.
    // rustdoc-stripper-ignore-next-stop
    /// Enables or disables the emission of the ::query-tooltip signal on @widget.
    ///
    /// A value of [`true`] indicates that @widget can have a tooltip, in this case
    /// the widget will be queried using `signal::gtk::Widget::query-tooltip` to
    /// determine whether it will provide a tooltip or not.
    pub fn has_tooltip(mut self, has_tooltip: bool) -> Self {
        self.has_tooltip = Some(has_tooltip);
        self
    }

    /// Override for height request of the widget.
    ///
    /// If this is -1, the natural request will be used.
    // rustdoc-stripper-ignore-next-stop
    /// Override for height request of the widget.
    ///
    /// If this is -1, the natural request will be used.
    // rustdoc-stripper-ignore-next-stop
    /// Override for height request of the widget.
    ///
    /// If this is -1, the natural request will be used.
    // rustdoc-stripper-ignore-next-stop
    /// Override for height request of the widget.
    ///
    /// If this is -1, the natural request will be used.
    pub fn height_request(mut self, height_request: i32) -> Self {
        self.height_request = Some(height_request);
        self
    }

    /// Whether to expand horizontally.
    // rustdoc-stripper-ignore-next-stop
    /// Whether to expand horizontally.
    // rustdoc-stripper-ignore-next-stop
    /// Whether to expand horizontally.
    // rustdoc-stripper-ignore-next-stop
    /// Whether to expand horizontally.
    pub fn hexpand(mut self, hexpand: bool) -> Self {
        self.hexpand = Some(hexpand);
        self
    }

    /// Whether to use the `hexpand` property.
    // rustdoc-stripper-ignore-next-stop
    /// Whether to use the `hexpand` property.
    // rustdoc-stripper-ignore-next-stop
    /// Whether to use the `hexpand` property.
    // rustdoc-stripper-ignore-next-stop
    /// Whether to use the `hexpand` property.
    pub fn hexpand_set(mut self, hexpand_set: bool) -> Self {
        self.hexpand_set = Some(hexpand_set);
        self
    }

    /// The [`gtk::LayoutManager`][crate::gtk::LayoutManager] instance to use to compute the preferred size
    /// of the widget, and allocate its children.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    // rustdoc-stripper-ignore-next-stop
    /// The [`gtk::LayoutManager`][crate::gtk::LayoutManager] instance to use to compute the preferred size
    /// of the widget, and allocate its children.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    // rustdoc-stripper-ignore-next-stop
    /// The [`gtk::LayoutManager`][crate::gtk::LayoutManager] instance to use to compute the preferred size
    /// of the widget, and allocate its children.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    // rustdoc-stripper-ignore-next-stop
    /// The [`gtk::LayoutManager`][crate::gtk::LayoutManager] instance to use to compute the preferred size
    /// of the widget, and allocate its children.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    pub fn layout_manager(mut self, layout_manager: &impl IsA<gtk::LayoutManager>) -> Self {
        self.layout_manager = Some(layout_manager.clone().upcast());
        self
    }

    /// Margin on bottom side of widget.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    // rustdoc-stripper-ignore-next-stop
    /// Margin on bottom side of widget.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    // rustdoc-stripper-ignore-next-stop
    /// Margin on bottom side of widget.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    // rustdoc-stripper-ignore-next-stop
    /// Margin on bottom side of widget.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    pub fn margin_bottom(mut self, margin_bottom: i32) -> Self {
        self.margin_bottom = Some(margin_bottom);
        self
    }

    /// Margin on end of widget, horizontally.
    ///
    /// This property supports left-to-right and right-to-left text
    /// directions.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    // rustdoc-stripper-ignore-next-stop
    /// Margin on end of widget, horizontally.
    ///
    /// This property supports left-to-right and right-to-left text
    /// directions.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    // rustdoc-stripper-ignore-next-stop
    /// Margin on end of widget, horizontally.
    ///
    /// This property supports left-to-right and right-to-left text
    /// directions.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    // rustdoc-stripper-ignore-next-stop
    /// Margin on end of widget, horizontally.
    ///
    /// This property supports left-to-right and right-to-left text
    /// directions.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    pub fn margin_end(mut self, margin_end: i32) -> Self {
        self.margin_end = Some(margin_end);
        self
    }

    /// Margin on start of widget, horizontally.
    ///
    /// This property supports left-to-right and right-to-left text
    /// directions.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    // rustdoc-stripper-ignore-next-stop
    /// Margin on start of widget, horizontally.
    ///
    /// This property supports left-to-right and right-to-left text
    /// directions.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    // rustdoc-stripper-ignore-next-stop
    /// Margin on start of widget, horizontally.
    ///
    /// This property supports left-to-right and right-to-left text
    /// directions.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    // rustdoc-stripper-ignore-next-stop
    /// Margin on start of widget, horizontally.
    ///
    /// This property supports left-to-right and right-to-left text
    /// directions.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    pub fn margin_start(mut self, margin_start: i32) -> Self {
        self.margin_start = Some(margin_start);
        self
    }

    /// Margin on top side of widget.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    // rustdoc-stripper-ignore-next-stop
    /// Margin on top side of widget.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    // rustdoc-stripper-ignore-next-stop
    /// Margin on top side of widget.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    // rustdoc-stripper-ignore-next-stop
    /// Margin on top side of widget.
    ///
    /// This property adds margin outside of the widget's normal size
    /// request, the margin will be added in addition to the size from
    /// [`WidgetExtManual::set_size_request()`][crate::gtk::prelude::WidgetExtManual::set_size_request()] for example.
    pub fn margin_top(mut self, margin_top: i32) -> Self {
        self.margin_top = Some(margin_top);
        self
    }

    /// The name of the widget.
    // rustdoc-stripper-ignore-next-stop
    /// The name of the widget.
    // rustdoc-stripper-ignore-next-stop
    /// The name of the widget.
    // rustdoc-stripper-ignore-next-stop
    /// The name of the widget.
    pub fn name(mut self, name: &str) -> Self {
        self.name = Some(name.to_string());
        self
    }

    /// The requested opacity of the widget.
    // rustdoc-stripper-ignore-next-stop
    /// The requested opacity of the widget.
    // rustdoc-stripper-ignore-next-stop
    /// The requested opacity of the widget.
    // rustdoc-stripper-ignore-next-stop
    /// The requested opacity of the widget.
    pub fn opacity(mut self, opacity: f64) -> Self {
        self.opacity = Some(opacity);
        self
    }

    /// How content outside the widget's content area is treated.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    // rustdoc-stripper-ignore-next-stop
    /// How content outside the widget's content area is treated.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    // rustdoc-stripper-ignore-next-stop
    /// How content outside the widget's content area is treated.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    // rustdoc-stripper-ignore-next-stop
    /// How content outside the widget's content area is treated.
    ///
    /// This property is meant to be set by widget implementations,
    /// typically in their instance init function.
    pub fn overflow(mut self, overflow: gtk::Overflow) -> Self {
        self.overflow = Some(overflow);
        self
    }

    /// Whether the widget will receive the default action when it is focused.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget will receive the default action when it is focused.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget will receive the default action when it is focused.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget will receive the default action when it is focused.
    pub fn receives_default(mut self, receives_default: bool) -> Self {
        self.receives_default = Some(receives_default);
        self
    }

    /// Whether the widget responds to input.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget responds to input.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget responds to input.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget responds to input.
    pub fn sensitive(mut self, sensitive: bool) -> Self {
        self.sensitive = Some(sensitive);
        self
    }

    /// Sets the text of tooltip to be the given string, which is marked up
    /// with Pango markup.
    ///
    /// Also see `Gtk::Tooltip::set_markup()`.
    ///
    /// This is a convenience property which will take care of getting the
    /// tooltip shown if the given string is not [`None`]:
    /// `property::gtk::Widget::has-tooltip` will automatically be set to [`true`]
    /// and there will be taken care of `signal::gtk::Widget::query-tooltip` in
    /// the default signal handler.
    ///
    /// Note that if both `property::gtk::Widget::tooltip-text` and
    /// `property::gtk::Widget::tooltip-markup` are set, the last one wins.
    // rustdoc-stripper-ignore-next-stop
    /// Sets the text of tooltip to be the given string, which is marked up
    /// with Pango markup.
    ///
    /// Also see `Gtk::Tooltip::set_markup()`.
    ///
    /// This is a convenience property which will take care of getting the
    /// tooltip shown if the given string is not [`None`]:
    /// `property::gtk::Widget::has-tooltip` will automatically be set to [`true`]
    /// and there will be taken care of `signal::gtk::Widget::query-tooltip` in
    /// the default signal handler.
    ///
    /// Note that if both `property::gtk::Widget::tooltip-text` and
    /// `property::gtk::Widget::tooltip-markup` are set, the last one wins.
    // rustdoc-stripper-ignore-next-stop
    /// Sets the text of tooltip to be the given string, which is marked up
    /// with Pango markup.
    ///
    /// Also see `Gtk::Tooltip::set_markup()`.
    ///
    /// This is a convenience property which will take care of getting the
    /// tooltip shown if the given string is not [`None`]:
    /// `property::gtk::Widget::has-tooltip` will automatically be set to [`true`]
    /// and there will be taken care of `signal::gtk::Widget::query-tooltip` in
    /// the default signal handler.
    ///
    /// Note that if both `property::gtk::Widget::tooltip-text` and
    /// `property::gtk::Widget::tooltip-markup` are set, the last one wins.
    // rustdoc-stripper-ignore-next-stop
    /// Sets the text of tooltip to be the given string, which is marked up
    /// with Pango markup.
    ///
    /// Also see `Gtk::Tooltip::set_markup()`.
    ///
    /// This is a convenience property which will take care of getting the
    /// tooltip shown if the given string is not [`None`]:
    /// `property::gtk::Widget::has-tooltip` will automatically be set to [`true`]
    /// and there will be taken care of `signal::gtk::Widget::query-tooltip` in
    /// the default signal handler.
    ///
    /// Note that if both `property::gtk::Widget::tooltip-text` and
    /// `property::gtk::Widget::tooltip-markup` are set, the last one wins.
    pub fn tooltip_markup(mut self, tooltip_markup: &str) -> Self {
        self.tooltip_markup = Some(tooltip_markup.to_string());
        self
    }

    /// Sets the text of tooltip to be the given string.
    ///
    /// Also see `Gtk::Tooltip::set_text()`.
    ///
    /// This is a convenience property which will take care of getting the
    /// tooltip shown if the given string is not [`None`]:
    /// `property::gtk::Widget::has-tooltip` will automatically be set to [`true`]
    /// and there will be taken care of `signal::gtk::Widget::query-tooltip` in
    /// the default signal handler.
    ///
    /// Note that if both `property::gtk::Widget::tooltip-text` and
    /// `property::gtk::Widget::tooltip-markup` are set, the last one wins.
    // rustdoc-stripper-ignore-next-stop
    /// Sets the text of tooltip to be the given string.
    ///
    /// Also see `Gtk::Tooltip::set_text()`.
    ///
    /// This is a convenience property which will take care of getting the
    /// tooltip shown if the given string is not [`None`]:
    /// `property::gtk::Widget::has-tooltip` will automatically be set to [`true`]
    /// and there will be taken care of `signal::gtk::Widget::query-tooltip` in
    /// the default signal handler.
    ///
    /// Note that if both `property::gtk::Widget::tooltip-text` and
    /// `property::gtk::Widget::tooltip-markup` are set, the last one wins.
    // rustdoc-stripper-ignore-next-stop
    /// Sets the text of tooltip to be the given string.
    ///
    /// Also see `Gtk::Tooltip::set_text()`.
    ///
    /// This is a convenience property which will take care of getting the
    /// tooltip shown if the given string is not [`None`]:
    /// `property::gtk::Widget::has-tooltip` will automatically be set to [`true`]
    /// and there will be taken care of `signal::gtk::Widget::query-tooltip` in
    /// the default signal handler.
    ///
    /// Note that if both `property::gtk::Widget::tooltip-text` and
    /// `property::gtk::Widget::tooltip-markup` are set, the last one wins.
    // rustdoc-stripper-ignore-next-stop
    /// Sets the text of tooltip to be the given string.
    ///
    /// Also see `Gtk::Tooltip::set_text()`.
    ///
    /// This is a convenience property which will take care of getting the
    /// tooltip shown if the given string is not [`None`]:
    /// `property::gtk::Widget::has-tooltip` will automatically be set to [`true`]
    /// and there will be taken care of `signal::gtk::Widget::query-tooltip` in
    /// the default signal handler.
    ///
    /// Note that if both `property::gtk::Widget::tooltip-text` and
    /// `property::gtk::Widget::tooltip-markup` are set, the last one wins.
    pub fn tooltip_text(mut self, tooltip_text: &str) -> Self {
        self.tooltip_text = Some(tooltip_text.to_string());
        self
    }

    /// How to distribute vertical space if widget gets extra space.
    // rustdoc-stripper-ignore-next-stop
    /// How to distribute vertical space if widget gets extra space.
    // rustdoc-stripper-ignore-next-stop
    /// How to distribute vertical space if widget gets extra space.
    // rustdoc-stripper-ignore-next-stop
    /// How to distribute vertical space if widget gets extra space.
    pub fn valign(mut self, valign: gtk::Align) -> Self {
        self.valign = Some(valign);
        self
    }

    /// Whether to expand vertically.
    // rustdoc-stripper-ignore-next-stop
    /// Whether to expand vertically.
    // rustdoc-stripper-ignore-next-stop
    /// Whether to expand vertically.
    // rustdoc-stripper-ignore-next-stop
    /// Whether to expand vertically.
    pub fn vexpand(mut self, vexpand: bool) -> Self {
        self.vexpand = Some(vexpand);
        self
    }

    /// Whether to use the `vexpand` property.
    // rustdoc-stripper-ignore-next-stop
    /// Whether to use the `vexpand` property.
    // rustdoc-stripper-ignore-next-stop
    /// Whether to use the `vexpand` property.
    // rustdoc-stripper-ignore-next-stop
    /// Whether to use the `vexpand` property.
    pub fn vexpand_set(mut self, vexpand_set: bool) -> Self {
        self.vexpand_set = Some(vexpand_set);
        self
    }

    /// Whether the widget is visible.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget is visible.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget is visible.
    // rustdoc-stripper-ignore-next-stop
    /// Whether the widget is visible.
    pub fn visible(mut self, visible: bool) -> Self {
        self.visible = Some(visible);
        self
    }

    /// Override for width request of the widget.
    ///
    /// If this is -1, the natural request will be used.
    // rustdoc-stripper-ignore-next-stop
    /// Override for width request of the widget.
    ///
    /// If this is -1, the natural request will be used.
    // rustdoc-stripper-ignore-next-stop
    /// Override for width request of the widget.
    ///
    /// If this is -1, the natural request will be used.
    // rustdoc-stripper-ignore-next-stop
    /// Override for width request of the widget.
    ///
    /// If this is -1, the natural request will be used.
    pub fn width_request(mut self, width_request: i32) -> Self {
        self.width_request = Some(width_request);
        self
    }

    /// The accessible role of the given [`gtk::Accessible`][crate::gtk::Accessible] implementation.
    ///
    /// The accessible role cannot be changed once set.
    // rustdoc-stripper-ignore-next-stop
    /// The accessible role of the given [`gtk::Accessible`][crate::gtk::Accessible] implementation.
    ///
    /// The accessible role cannot be changed once set.
    // rustdoc-stripper-ignore-next-stop
    /// The accessible role of the given [`gtk::Accessible`][crate::gtk::Accessible] implementation.
    ///
    /// The accessible role cannot be changed once set.
    // rustdoc-stripper-ignore-next-stop
    /// The accessible role of the given [`gtk::Accessible`][crate::gtk::Accessible] implementation.
    ///
    /// The accessible role cannot be changed once set.
    pub fn accessible_role(mut self, accessible_role: gtk::AccessibleRole) -> Self {
        self.accessible_role = Some(accessible_role);
        self
    }
}

/// Trait containing all [`struct@Window`] methods.
///
/// # Implementors
///
/// [`AboutWindow`][struct@crate::AboutWindow], [`ApplicationWindow`][struct@crate::ApplicationWindow], [`Dialog`][struct@crate::Dialog], [`Window`][struct@crate::Window]
// rustdoc-stripper-ignore-next-stop
/// Trait containing all [`struct@Window`] methods.
///
/// # Implementors
///
/// [`AboutWindow`][struct@crate::AboutWindow], [`ApplicationWindow`][struct@crate::ApplicationWindow], [`Dialog`][struct@crate::Dialog], [`Window`][struct@crate::Window]
// rustdoc-stripper-ignore-next-stop
/// Trait containing all [`struct@Window`] methods.
///
/// # Implementors
///
/// [`AboutWindow`][struct@crate::AboutWindow], [`ApplicationWindow`][struct@crate::ApplicationWindow], [`Dialog`][struct@crate::Dialog], [`Window`][struct@crate::Window]
// rustdoc-stripper-ignore-next-stop
/// Trait containing all [`struct@Window`] methods.
///
/// # Implementors
///
/// [`AboutWindow`][struct@crate::AboutWindow], [`ApplicationWindow`][struct@crate::ApplicationWindow], [`Dialog`][struct@crate::Dialog], [`Window`][struct@crate::Window]
pub trait HeWindowExt: 'static {
    #[doc(alias = "he_window_get_parent")]
    #[doc(alias = "get_parent")]
    fn parent(&self) -> Option<gtk::Window>;

    #[doc(alias = "he_window_set_parent")]
    fn set_parent(&self, value: Option<&impl IsA<gtk::Window>>);

    #[doc(alias = "he_window_get_modal")]
    #[doc(alias = "get_modal")]
    fn is_modal(&self) -> bool;

    #[doc(alias = "he_window_set_modal")]
    fn set_modal(&self, value: bool);

    #[doc(alias = "he_window_get_has_title")]
    #[doc(alias = "get_has_title")]
    fn has_title(&self) -> bool;

    #[doc(alias = "he_window_set_has_title")]
    fn set_has_title(&self, value: bool);

    #[doc(alias = "he_window_get_has_back_button")]
    #[doc(alias = "get_has_back_button")]
    fn has_back_button(&self) -> bool;

    #[doc(alias = "he_window_set_has_back_button")]
    fn set_has_back_button(&self, value: bool);

    #[doc(alias = "parent")]
    fn connect_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "modal")]
    fn connect_modal_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "has-title")]
    fn connect_has_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "has-back-button")]
    fn connect_has_back_button_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Window>> HeWindowExt for O {
    fn parent(&self) -> Option<gtk::Window> {
        unsafe { from_glib_none(ffi::he_window_get_parent(self.as_ref().to_glib_none().0)) }
    }

    fn set_parent(&self, value: Option<&impl IsA<gtk::Window>>) {
        unsafe {
            ffi::he_window_set_parent(
                self.as_ref().to_glib_none().0,
                value.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    fn is_modal(&self) -> bool {
        unsafe { from_glib(ffi::he_window_get_modal(self.as_ref().to_glib_none().0)) }
    }

    fn set_modal(&self, value: bool) {
        unsafe {
            ffi::he_window_set_modal(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn has_title(&self) -> bool {
        unsafe { from_glib(ffi::he_window_get_has_title(self.as_ref().to_glib_none().0)) }
    }

    fn set_has_title(&self, value: bool) {
        unsafe {
            ffi::he_window_set_has_title(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn has_back_button(&self) -> bool {
        unsafe {
            from_glib(ffi::he_window_get_has_back_button(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_has_back_button(&self, value: bool) {
        unsafe {
            ffi::he_window_set_has_back_button(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    fn connect_parent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_parent_trampoline<P: IsA<Window>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::parent\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_parent_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_modal_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_modal_trampoline<P: IsA<Window>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::modal\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_modal_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_has_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_title_trampoline<P: IsA<Window>, F: Fn(&P) + 'static>(
            this: *mut ffi::HeWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::has-title\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_has_title_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_has_back_button_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_back_button_trampoline<
            P: IsA<Window>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HeWindow,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Window::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::has-back-button\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_has_back_button_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for Window {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Window")
    }
}
