// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "HeBin")]
    pub struct Bin(Object<ffi::HeBin, ffi::HeBinClass>) @extends gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::he_bin_get_type(),
    }
}

impl Bin {
        pub const NONE: Option<&'static Bin> = None;
    
}

pub trait BinExt: 'static {
    #[doc(alias = "he_bin_add_child")]
    fn add_child(&self, builder: &gtk::Builder, child: &impl IsA<glib::Object>, type_: Option<&str>);
}

impl<O: IsA<Bin>> BinExt for O {
    fn add_child(&self, builder: &gtk::Builder, child: &impl IsA<glib::Object>, type_: Option<&str>) {
        unsafe {
            ffi::he_bin_add_child(self.as_ref().to_glib_none().0, builder.to_glib_none().0, child.as_ref().to_glib_none().0, type_.to_glib_none().0);
        }
    }
}

impl fmt::Display for Bin {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Bin")
    }
}
